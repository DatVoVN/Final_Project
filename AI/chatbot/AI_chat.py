import json
import faiss
import gradio as gr
from sentence_transformers import SentenceTransformer
import numpy as np

# Load model ƒë·ªÉ embed text
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

# === B∆Ø·ªöC 1: Load v√† chu·∫©n h√≥a data ===
with open("jobs_data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# Chuy·ªÉn th√¥ng tin t·ª´ng job th√†nh vƒÉn b·∫£n m√¥ t·∫£ d·ªÖ hi·ªÉu cho LLM
job_texts = []
job_infos = []

for company in data:
    for job in company["jobs"]:
        job_text = f"{company['company_name']} tuy·ªÉn {job['title']} t·∫°i {job['location']}.\nM·ª©c l∆∞∆°ng: {job['salary_range']}.\nM√¥ t·∫£ c√¥ng vi·ªác: {job['description']}"
        job_texts.append(job_text)
        job_infos.append({
            "company": company["company_name"],
            "job_title": job["title"],
            "location": job["location"],
            "salary": job["salary_range"],
            "description": job["description"],
            "url": company["website"]
        })

# === B∆Ø·ªöC 2: Encode job_texts th√†nh vector ===
embeddings = model.encode(job_texts, convert_to_numpy=True)
# === B∆Ø·ªöC 3: T·∫°o FAISS index ===
dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(embeddings)
# === B∆Ø·ªöC 4: ƒê·ªãnh nghƒ©a h√†m tr·∫£ l·ªùi chatbot ===
def chatbot_answer(user_query):
    query_vec = model.encode([user_query], convert_to_numpy=True)
    D, I = index.search(query_vec, k=5)  # Top 5 job g·∫ßn nh·∫•t

    results = []
    for i in I[0]:
        info = job_infos[i]

        # Ki·ªÉm tra n·∫øu c√≥ c√¥ng ty trong k·∫øt qu·∫£ t√¨m ki·∫øm
        if any(company_name.lower() in user_query.lower() for company_name in [info['company'], info['location']]):
            results.append(f"üîπ **C√¥ng ty**: {info['company']}\n**V·ªã tr√≠**: {info['job_title']} t·∫°i {info['location']}\nüí∞ **M·ª©c l∆∞∆°ng**: {info['salary']}\nüìÑ **M√¥ t·∫£ c√¥ng vi·ªác**: {info['description']}\nüåê **Website c√¥ng ty**: {info['url']}\n")

    # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    if not results:
        return "Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác ho·∫∑c c√¥ng ty ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."

    return "\n\n".join(results)

# === B∆Ø·ªöC 5: T·∫°o giao di·ªán Gradio ===
demo = gr.Interface(fn=chatbot_answer,
                    inputs=gr.Textbox(lines=2, placeholder="B·∫°n mu·ªën t√¨m vi·ªác g√¨?"),
                    outputs="markdown",
                    title="ü§ñ Chatbot T∆∞ v·∫•n Vi·ªác l√†m",
                    description="Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n ƒë·ªÉ xem c√¥ng vi·ªác ph√π h·ª£p. V√≠ d·ª•: 'C√¥ng vi·ªác l·∫≠p tr√¨nh ·ªü H√† N·ªôi' ho·∫∑c 'C√¥ng ty XYZ'.")

demo.launch()
